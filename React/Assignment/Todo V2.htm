<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TODO List</title>
</head>

<body>

    <div id="root"></div>

    <style>
        li:hover {
            background-color: rgba(0, 0, 255, 0.4);
        }

        div {
            padding: 10px;
            width: fit-content;
            margin: auto;
            margin-top: 10px;
            padding: 20px;
        }

        #root {
            border: 1px solid #f00;
        }

        table {
            border-collapse: collapse;
            border: 1px solid black;
        }

        td {
            border: 1px solid black;
            padding: 5px
        }

        .completed {
            text-decoration: line-through;
            opacity: 0.5;
        }

        button {
            background-color: white;
            outline: none;
            border: 2px solid blue;
            border-radius: 10px;
            background-color: #DDD;
            margin: 5px;
            padding: 5px;
        }

        input[type="text"] {
            padding: 2px;
            outline: 1px solid blue;
            font-size: larger;
        }
    </style>

    <script crossorigin src=".././Core/react.development.js"></script>
    <script crossorigin src=".././Core/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script type="text/babel">

        const rootElement = document.getElementById('root')


        class NewItemBlock extends React.Component {
            constructor(props) {
                super(props)
                this.state = { value: '' }
            }
            handleChange = ev => {
                this.setState({ value: ev.target.value })
            }
            addTODO = (ev) => {
                if (this.state.value.trim().length) {
                    this.props.addTODO(this.state.value.trim())
                    this.setState({ value: '' })
                }
            }
            render() {
                return (
                    <div>
                        <input type="text" placeholder="kill a cat" onChange={this.handleChange} value={this.state.value} />
                        {' '}
                        <button onClick={this.addTODO}>Add to Todo List</button>
                    </div>
                );
            }
        }
        class CellItem extends React.Component {
            constructor(props) {
                super(props)
            }
            handleClick = ev => {
                this.props.toggleTODO(this.props.todo.id);
            }
            render() {
                // console.log(this.props)
                return (
                    <td className={this.props.todo.pending ? '' : 'completed'}
                        onClick={this.handleClick}>
                        {this.props.todo.value}

                    </td>
                );
            }
        }
        class RowItem extends React.Component {
            render() {
                return (
                    <tr>
                        {this.props.todos.map(todo => (
                            <CellItem toggleTODO={this.props.toggleTODO} todo={todo} key={todo.id} />
                        ))}
                    </tr>
                )
            }
        }
        class Table extends React.Component {
            constructor(props) {
                super(props)
                this.numOfCols = 2;
            }

            render() {
                // console.log(this.props)
                const rows = []
                const numOfRows = Math.ceil(this.props.todos.length / this.numOfCols)
                for (let i = 0; i < numOfRows; i++) {
                    rows.push(
                        <RowItem
                            todos={
                                this.props.todos.slice(this.numOfCols * i, (i + 1) * this.numOfCols)}
                            toggleTODO={this.props.toggleTODO}
                        />
                    )
                }
                return (
                    <table>
                        <tbody>
                            {rows.map(el => el)}
                        </tbody>
                    </table>
                );
            }
        }
        class Filter extends React.Component {
            constructor(props) {
                super(props)
            }
            handleClick = (ev) => {
                if (ev.target.nodeName === "BUTTON") {
                    this.props.changeFilter(ev.target.getAttribute('data'));
                }
            }

            render() {
                return (
                    <div onClick={this.handleClick}>
                        <button data='all'>All</button>
                        <button data='pending'>Pending</button>
                        <button data='completed'>Completed</button>
                    </div>
                )
            }
        }

        class Container extends React.Component {
            constructor(props) {
                super(props)
                this.state = {
                    todos: [
                        { id: "1a", value: 'Clean Doghouse', pending: true },
                        { id: "2b", value: 'Take dog on walk', pending: true },
                        { id: "3c", value: 'Grocery Shopping', pending: true },
                        { id: "4d", value: 'Cook Dinner', pending: true },
                        { id: "5e", value: 'Eat Dinner', pending: true },
                    ],
                    filter: 'all'
                }

            }
            toggleTODO = (id) => {
                const newState = [...this.state.todos]
                const index = newState.findIndex(item => item.id === id)
                newState[index] = { ...newState[index], pending: !newState[index].pending }
                this.setState({ todos: newState });
            }

            addTODO = (value) => {
                const newState = [...this.state.todos, { id: Math.random().toString(), value, pending: true }]
                this.setState({ todos: newState });
            }
            changeFilter = (newFilter) => {
                this.setState({ filter: newFilter })
            }
            filter() {
                return [...this.state.todos].filter(todo => {
                    return this.state.filter === 'all' || (this.state.filter === 'pending' && todo.pending) ||
                        (this.state.filter === 'completed' && !todo.pending)
                })
            }
            render() {
                const filteredTODO = this.filter()
                return (
                    <div>
                        <NewItemBlock addTODO={this.addTODO} />
                        <Filter changeFilter={this.changeFilter} />
                        <Table todos={filteredTODO} toggleTODO={this.toggleTODO} />
                    </div>
                );
            }
        }
        ReactDOM.render(<Container />, rootElement)

    </script>

</body>

</html>