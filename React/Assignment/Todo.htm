<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TODO List</title>
</head>

<body>

    <div id="root"></div>

    <style>
        li:hover {
            background-color: rgba(0, 0, 255, 0.4);
        }

        div {
            border: 1px solid #000;
            padding: 10px;
            width: fit-content;
            margin: auto;
            margin-top: 10px;
            padding: 20px;
        }

        #root {
            border: 1px solid #f00;
        }

        ul {
            border: 1px solid #00f;
        }

        li {
            border: 1px solid #000;
            padding: 2px;
            margin: 4px;
        }

        .completed {
            text-decoration: line-through;
            opacity: 0.5;
        }
    </style>

    <script crossorigin src=".././Core/react.development.js"></script>
    <script crossorigin src=".././Core/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script type="text/babel">

        const rootElement = document.getElementById('root')


        class NewItemBlock extends React.Component {
            constructor(props) {
                super(props)
                this.state = { value: '' }
            }
            handleChange = ev => {
                this.setState({ value: ev.target.value })
            }
            addItem = (ev) => {
                if (this.state.value.trim().length) {
                    this.props.addItem(this.state.value)
                    this.setState({ value: '' })
                }
            }
            render() {
                return (
                    <div>
                        <input type="text" placeholder="kill a cat" onChange={this.handleChange} value={this.state.value} />
                        {' '}
                        <button onClick={this.addItem}>Add to Todo List</button>
                    </div>
                );
            }
        }
        class ListItem extends React.Component {
            constructor(props) {
                super(props)
            }
            render() {
                // console.log(this.props.item)
                return (
                    <li className={this.props.item.pending ? '' : 'completed'}
                        onClick={(ev) => {
                            this.props.item.pending ?
                                this.props.completeItem(this.props.item.id) :
                                this.props.markPending(this.props.item.id)
                        }
                        }
                        key={this.props.item.id}>
                        {this.props.item.value}
                    </li>
                );
            }
        }
        class List extends React.Component {
            constructor(props) {
                super(props)
            }
            handleClick = (ev) => {
                this.props.deleteItem(ev.target.id);
            }

            render() {
                console.log(this.props.filter)
                return (
                    <ul>
                        {this.props.todos.map(item => {
                            return (
                                (
                                    this.props.filter === 'all' ||
                                    (this.props.filter === 'pending' && item.pending) ||
                                    (this.props.filter === 'completed' && !item.pending) ||
                                    undefined
                                ) && (
                                    <ListItem completeItem={this.props.completeItem} item={item} key={item.id} markPending={this.props.markPending} />
                                )
                            )
                        })}
                    </ul>
                );
            }
        }
        class Filter extends React.Component {
            constructor(props) {
                super(props)
            }
            handleClick = (ev) => {
                if (ev.target.nodeName === "BUTTON") {
                    this.props.changeFilter(ev.target.getAttribute('data'));
                }
            }

            render() {
                return (
                    <div onClick={this.handleClick}>
                        <button data='all'>All</button>
                        <button data='pending'>Active</button>
                        <button data='completed'>Completed</button>
                    </div>
                )
            }
        }

        class Container extends React.Component {
            constructor(props) {
                super(props)
                this.todos = [
                    { id: "1a", value: 'Clean Doghouse', pending: true },
                    { id: "2b", value: 'Take dog on walk', pending: true },
                    { id: "3c", value: 'Grocery Shopping', pending: true },
                    { id: "4d", value: 'Cook Dinner', pending: true },
                    { id: "5e", value: 'Eat Dinner', pending: true },
                ];
                this.state = { change: false, filter: 'all' };
            }
            completeItem = (id) => {
                const item = this.todos.find(item => item.id === id);
                item.pending = false;
                this.setState({ change: true });
            }
            markPending = (id) => {
                const item = this.todos.find(item => item.id === id);
                item.pending = true;
                this.setState({ change: true });
            }
            shouldComponentUpdate(_, nextState) {
                return nextState.change || (this.state.filter != nextState.filter);
            }
            componentDidUpdate() {
                if (!this.state)
                    this.setState({ change: false });
            }
            addItem = (value) => {
                this.todos.push({ id: Math.random().toString(), value, pending: true })
                this.setState({ change: true })
            }
            changeFilter = (newFilter) => {
                this.setState({ filter: newFilter })
            }
            render() {
                return (
                    <div>
                        <NewItemBlock addItem={this.addItem} />
                        <Filter changeFilter={this.changeFilter} />
                        <List todos={this.todos} completeItem={this.completeItem} markPending={this.markPending} filter={this.state.filter} />
                    </div>
                );
            }
        }
        ReactDOM.render(<Container />, rootElement)

    </script>

</body>

</html>