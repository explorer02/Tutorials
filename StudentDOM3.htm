<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>
    <script>

        class Student {
            constructor(id, reading, ref = undefined) {
                this._id = id;
                this._reading = reading;
                this.domref = ref;
            }
            get id() {
                return this._id;
            }
            set id(newId) {
                let change = (newId !== this._id);
                this._id = newId;
                if (change)
                    this.domref.startTimer();

            }
            get reading() {
                return this._reading;
            }
            set reading(newReading) {
                let change = (newReading !== this._reading);
                this._reading = newReading;
                if (change)
                    this.domref.startTimer();
            }
        }

        ////////////////////////////////////////////

        class StudentDom {
            constructor(studs, time) {
                this.studs = studs.map(stud => this.deepCopy(stud));
                this.time = time;
                this.timerID = undefined;
            }
            deepCopy(stud) {
                return new Student(stud.id, stud.reading, this);
            }
            getStudentById(id) {
                return this.studs.find(stud => stud.id === id);
            }
            append(stud) {
                this.studs.push(new Student(stud.id, stud.reading, this));
                this.startTimer();
            }
            remove(id) {
                let prevLength = this.studs.length;
                this.studs = this.studs.filter(stud => stud.id !== id);
                if (this.studs.length !== prevLength)
                    this.startTimer();
            }
            startTimer() {
                if (!this.timerID) {
                    this.timerID = setTimeout(() => this.reflectChanges(), this.time);
                }
            }
            stopTimer() {
                this.timerID = undefined;
            }
            reflectChanges() {
                console.log(this.studs);
                this.stopTimer();
            }
        }

        //////////////////////////////////////

        let studs = [
            new Student(1, true),
            new Student(2, false),
            new Student(3, false),
            new Student(4, true),
            new Student(5, true)
        ];

        let newStud = new Student(6, false);

        let dom = new StudentDom(studs, 2000);

    </script>
</body>

</html>